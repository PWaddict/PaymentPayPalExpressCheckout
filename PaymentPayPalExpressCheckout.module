<?php namespace ProcessWire;

/**
 * PayPal Checkout Module
 * ProcessWire 3.x, Copyright 2018 by Ryan Cramer
 * https://processwire.com
 *
 */

class PaymentPayPalExpressCheckout extends PaymentModule {

	public static function getModuleInfo() {
		return array(
			'title' => 'PayPal Checkout',
			'version' => '1.2.6',
			'summary' => 'PayPal Checkout module using the Client-Side REST API.',
			'singular' => false,
			'autoload' => false,
			'requires' => 'PaymentModule',
			'author' => 'PWaddict',
			'icon' => 'paypal'
		);
	}

	static public function getDefaultData() {
		return array(
			"formId" => "checkout-form",
			"fundingMethods" => "",
			"loadingHTML" => "",
			"notificationHTML" => "",
			"aboveHTML" => "",
			"belowHTML" => "",
			"ajax" => 0,
			"ajaxId" => ""
		);
	}

	public function init() {
		$this->currency = $this->defaultCurrency;
	}

	private function calculateAmount() {
		return $this->getTotalAmount() / 100;
	}

	public function getTitle() {
		return $this->_("PayPal");
	}

	public function getFailureReason() {
		return $this->_("There was something wrong with the payment.");
	}

	public function processPayment() {
		if ($_POST['payment_state'] == 'approved') {
			return true;
		}
		return false;
	}

	public function render() {
		if ($this->getTotalAmount() <= 0) throw new WireException("Products are not set");
		if ($this->processUrl == '') throw new WireException("processUrl is not set");

		if ($this->wire('languages')) {
			$userLanguage = $this->wire('user')->language;
			$lang = $userLanguage->isDefault() ? '' : "__$userLanguage->id";
		}
		else {
			$lang = '';
		}

		if ($this->data['ajax']) {
			$paypalScript = "";

			$form = "";

			$submit = "var xhr = new XMLHttpRequest();
			xhr.open('POST', '{$this->processUrl}', true);

			xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');

			xhr.onreadystatechange = function () {
					if (this.readyState == 4 && this.status == 200) {
						document.getElementById('" . $this->data['ajaxId'] . "').innerHTML = this.responseText;
					}
				};

			xhr.send('payment_state=' + response.state + '');";

		}
		else {
			$paypalScript = "<script src='https://www.paypalobjects.com/api/checkout.min.js'></script>";

			$form = "<form id='{$this->formId}' action='{$this->processUrl}' method='POST'></form>";

			$submit = "var form = document.getElementById('{$this->formId}');

			input = document.createElement('input');
			input.setAttribute('type', 'hidden');
			input.setAttribute('name', 'payment_state');
			input.setAttribute('value', response.state);

			form.appendChild(input);
			form.submit();";

		}

		$out = "";
		$out .= "{$paypalScript}

		<div id='paypal-button-loading'>" . ($this->data['loadingHTML' . $lang] ? $this->data['loadingHTML' . $lang] : $this->data['loadingHTML']) . "</div>
		<div id='paypal-button-above'>" . ($this->data['aboveHTML' . $lang] ? $this->data['aboveHTML' . $lang] : $this->data['aboveHTML']) . "</div>
		<div id='paypal-button-container'></div>
		<div id='paypal-button-notification'>" . ($this->data['notificationHTML' . $lang] ? $this->data['notificationHTML' . $lang] : $this->data['notificationHTML']) . "</div>
		<div id='paypal-button-below'>" . ($this->data['belowHTML' . $lang] ? $this->data['belowHTML' . $lang] : $this->data['belowHTML']) . "</div>

		{$form}

		<script>
		document.getElementById('paypal-button-loading').style.display = 'block';
		document.getElementById('paypal-button-above').style.display = 'none';
		document.getElementById('paypal-button-container').style.display = 'none';
		document.getElementById('paypal-button-notification').style.display = 'none';
		document.getElementById('paypal-button-below').style.display = 'none';

		paypal.Button.render({

			env: '{$this->enviroment}',

			client: {
				sandbox: '{$this->clientIdSandbox}',
				production: '{$this->clientIdLive}'
			},

			locale: '" . ($this->data['locale' . $lang] ? $this->data['locale' . $lang] : $this->data['locale']) . "',

			style: {
				layout: 'vertical',
				size: '{$this->size}',
				color: '{$this->color}',
				shape: '{$this->shape}'
			},

			funding: {
				disallowed: [ ";
				$fundings = "";
				foreach($this->fundingMethods as $method) {
					$fundings .= $method . ', ';
				}

				$out .= trim($fundings, ", ");

				$out .= " ]
			},

			commit: true,

			payment: function(data, actions) {

				return actions.payment.create({
					payment: {
						transactions: [
							{
								amount: {
									total: '{$this->calculateAmount()}',
									currency: '" . ($this->data['currency' . $lang] ? $this->data['currency' . $lang] : $this->data['currency']) . "',
								},
								item_list: {
									items: [";
									foreach($this->products as $p) {
										$amount = $p->amount / 100;
										$out .= "{
											name: '{$p->title}',
											quantity: {$p->quantity},
											price: '{$amount}',
											currency: '" . ($this->data['currency' . $lang] ? $this->data['currency' . $lang] : $this->data['currency']) . "'
										},";
									}

									$out .= "]
								},
								invoice_number: '{$this->id}'
							}
						]
					}
				});

			},

			onAuthorize: function(data, actions) {

				return actions.payment.execute().then(function(response) {

					document.getElementById('paypal-button-above').style.display = 'none';
					document.getElementById('paypal-button-container').style.display = 'none';
					document.getElementById('paypal-button-notification').style.display = 'block';
					document.getElementById('paypal-button-below').style.display = 'none';

					{$submit}

				});

			},

			onEnter: function() {
				document.getElementById('paypal-button-loading').style.display = 'none';
				document.getElementById('paypal-button-above').style.display = 'block';
				document.getElementById('paypal-button-container').style.display = 'block';
				document.getElementById('paypal-button-below').style.display = 'block';
			}

		}, '#paypal-button-container');
		</script>";

		return $out;
	}

	public static function getModuleConfigInputfields(array $data) {
		$data = array_merge(self::getDefaultData(), $data);
		$inputfields = new InputfieldWrapper();
		$modules = wire('modules');

		$requiredFields = $modules->get("InputfieldFieldset");
		$requiredFields->label = __('Required Fields');

		$f = $modules->get('InputfieldText');
		$f->name = 'formId';
		$f->label = __("Form ID");
		$f->description = __("ID attached to dynamically generated form element.");
		$f->required = 1;
		$f->columnWidth = 33;
		if(isset($data['formId'])) $f->value = $data['formId'];
		$requiredFields->add($f);

		$f = $modules->get('InputfieldText');
		$f->name = 'currency';
		$f->label = __("Currency");
		$f->description = __("Add the currency code for the transactions.");
		$f->notes = __("E.g. USD or EUR etc. All supported codes are listed [here](https://developer.paypal.com/docs/classic/api/currency_codes/).");
		$f->required = 1;
		$f->columnWidth = 34;
		$f->useLanguages = true;
		if(isset($data['currency'])) $f->value = $data['currency'];
		$requiredFields->add($f);

		$f = $modules->get('InputfieldText');
		$f->name = 'locale';
		$f->label = __("Locale");
		$f->required = 1;
		$f->columnWidth = 33;
		$f->description = __("Localize the checkout flow.");
		$f->notes = __("E.g. en_US or en_GB or es_ES etc. All supported codes are listed [here](https://developer.paypal.com/docs/classic/api/locale_codes/).");
		$f->useLanguages = true;
		if(isset($data['locale'])) $f->value = $data['locale'];
		$requiredFields->add($f);

		$f = $modules->get('InputfieldRadios');
		$f->name = 'enviroment';
		$f->label = __('Enviroment');
		$f->required = 1;
		$f->columnWidth = 20;
		$f->addOption('sandbox', __('Sandbox'));
		$f->addOption('production', __('Live'));
		$f->value = isset($data['enviroment']) ? $data['enviroment'] : 'sandbox';
		$requiredFields->add($f);

		$f = $modules->get('InputfieldText');
		$f->name = 'clientIdSandbox';
		$f->label = __("Sandbox Client ID");
		$f->notes = __("Get your Sandbox Client ID by creating a REST API app [here](https://developer.paypal.com/developer/applications/create).");
		$f->required = 1;
		$f->columnWidth = 40;
		if(isset($data['clientIdSandbox'])) $f->value = $data['clientIdSandbox'];
		$requiredFields->add($f);

		$f = $modules->get('InputfieldText');
		$f->name = 'clientIdLive';
		$f->label = __("Live Client ID");
		$f->notes = __("Get your Live Client ID by creating a REST API app [here](https://developer.paypal.com/developer/applications/create).");
		$f->required = 1;
		$f->columnWidth = 40;
		if(isset($data['clientIdLive'])) $f->value = $data['clientIdLive'];
		$requiredFields->add($f);

		$inputfields->add($requiredFields);

		$optionalFields = $modules->get("InputfieldFieldset");
		$optionalFields->label = __('Optional Fields');

		$f = $modules->get('InputfieldRadios');
		$f->name = 'size';
		$f->label = __('Button Size');
		$f->columnWidth = 25;
		$f->addOption('medium', __('Medium'));
		$f->addOption('large', __('Large'));
		$f->addOption('responsive', __('Responsive'));
		$f->value = isset($data['size']) ? $data['size'] : 'responsive';
		$optionalFields->add($f);

		$f = $modules->get('InputfieldRadios');
		$f->name = 'color';
		$f->label = __('Button Color');
		$f->columnWidth = 25;
		$f->addOption('gold', __('Gold'));
		$f->addOption('blue', __('Blue'));
		$f->addOption('silver', __('Silver'));
		$f->addOption('black', __('Black'));
		$f->value = isset($data['color']) ? $data['color'] : 'gold';
		$optionalFields->add($f);

		$f = $modules->get('InputfieldRadios');
		$f->name = 'shape';
		$f->label = __('Button Shape');
		$f->columnWidth = 25;
		$f->addOption('pill', __('Pill'));
		$f->addOption('rect', __('Rect'));
		$f->value = isset($data['shape']) ? $data['shape'] : 'rect';
		$optionalFields->add($f);

		$f = $modules->get('InputfieldCheckboxes');
		$f->name = 'fundingMethods';
		$f->label = __('Hide Funding Buttons');
		$f->notes = __("PayPal Credit button is visible by default to US buyers only and ELV button to German buyers only.");
		$f->columnWidth = 25;
		$f->addOption('paypal.FUNDING.CREDIT', __('PayPal Credit'));
		$f->addOption('paypal.FUNDING.CARD', __('Credit/Debit Cards'));
		$f->addOption('paypal.FUNDING.ELV', __('ELV'));
		$f->value = isset($data['fundingMethods']) ? $data['fundingMethods'] : '';
		$optionalFields->add($f);

		$f = $modules->get('InputfieldTextarea');
		$f->name = 'loadingHTML';
		$f->label = __("Loading Buttons HTML");
		$f->description = __("HTML added while the PayPal buttons are fully rendered and ready to be clicked.");
		$f->columnWidth = 50;
		$f->useLanguages = true;
		if(isset($data['loadingHTML'])) $f->value = $data['loadingHTML'];
		$optionalFields->add($f);

		$f = $modules->get('InputfieldTextarea');
		$f->name = 'notificationHTML';
		$f->label = __("Processing Notification HTML");
		$f->description = __("HTML added after the PayPal payment executed.");
		$f->columnWidth = 50;
		$f->useLanguages = true;
		if(isset($data['notificationHTML'])) $f->value = $data['notificationHTML'];
		$optionalFields->add($f);

		$f = $modules->get('InputfieldTextarea');
		$f->name = 'aboveHTML';
		$f->label = __("Above PayPal Buttons HTML");
		$f->description = __("HTML added above PayPal buttons after they are fully rendered and ready to be clicked.");
		$f->columnWidth = 50;
		$f->useLanguages = true;
		if(isset($data['aboveHTML'])) $f->value = $data['aboveHTML'];
		$optionalFields->add($f);

		$f = $modules->get('InputfieldTextarea');
		$f->name = 'belowHTML';
		$f->label = __("Below PayPal Buttons HTML");
		$f->description = __("HTML added below PayPal buttons after they are fully rendered and ready to be clicked.");
		$f->columnWidth = 50;
		$f->useLanguages = true;
		if(isset($data['belowHTML'])) $f->value = $data['belowHTML'];
		$optionalFields->add($f);

		$f = $modules->get('InputfieldCheckbox');
		$f->attr('name+id', 'ajax');
		$f->label = __('AJAX Checkout');
		$f->description = __("IMPORTANT: Enable this option ONLY if your checkout process is already using AJAX in order to display the success page via AJAX too.");
		$f->notes = __("IMPORTANT: You have to manually include the below PayPal Checkout script in your template's <head> or above </body> section: <script src='https://www.paypalobjects.com/api/checkout.min.js' async></script>");
		$f->columnWidth = 50;
		$f->attr('checked', isset($data['ajax']) && $data['ajax'] ? 'checked' : '' );
		$optionalFields->add($f);

		$f = $modules->get('InputfieldText');
		$f->name = 'ajaxId';
		$f->label = __("AJAX Checkout Div ID");
		$f->description = __("Add your div ID you're using to output the AJAX checkout content.");
		$f->showIf = "ajax=1";
		$f->required = 1;
		$f->columnWidth = 50;
		if(isset($data['ajaxId'])) $f->value = $data['ajaxId'];
		$optionalFields->add($f);

		$inputfields->add($optionalFields);

		return $inputfields;
	}
}
